from data.constants import constants
from data.database import Database
from data.models import (ContinueKeyboard, DifficultyChangingKeyboard,
                         GameKeyboard, User)
from data.utils import calculate_score
from telegram import ParseMode

from actions.stats import get_score

db = Database()
diff_description = constants['diff_description']

def game(update, context):
    user_id = update.effective_chat.id
    user = db.session.query(User).filter_by(user_id=user_id).first()
    k = GameKeyboard(user)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ {k.correct_answer.name.title()}?',
        reply_markup=k.generate_keyboard_markup()
    )

def keyboard_game_handler(update, context):
    data = update.callback_query.data
    user_id = update.effective_chat.id
    user = db.session.query(User).filter_by(user_id=user_id).first()
    difficulty = user.difficulty + 1
    update.callback_query.answer()

    if data == 'start':
        update.callback_query.edit_message_text(
            text='–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!\n–ò –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:',
            )
        return game(update, context)

    if data == 'True':
        user.user_score = calculate_score(user, difficulty, True)
        db.session.commit()
        update.callback_query.edit_message_text(
            text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{difficulty} –æ—á–∫–∞!\n\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: <b>{user.user_score}</b>',
            reply_markup=ContinueKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)

    if data == 'False':
        user.user_score = calculate_score(user, difficulty, False)
        db.session.commit()
        update.callback_query.edit_message_text(
            text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ! –í—ã —Ç–µ—Ä—è–µ—Ç–µ {difficulty} –æ—á–∫–∞!\n\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: <b>{user.user_score}</b>',
            reply_markup=ContinueKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)

    if data == 'game':
        k = GameKeyboard(user)
        update.callback_query.edit_message_text(
            text=f'–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ {k.correct_answer.name.title()}?',
            reply_markup=k.generate_keyboard_markup()
    )

    if data == 'score':
        update.callback_query.edit_message_text(
            text=get_score(user),
            reply_markup=ContinueKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)

    if 'pass' in data:
        if user.user_score >= 1:
            user.user_score -= 1
        else:
            user.user_score = 0
        db.session.commit()
        update.callback_query.edit_message_text(
            text=f'–û—á–µ–Ω—å –∂–∞–ª—åüòî\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{data.replace("pass","")}</b>\n\n–í—ã —Ç–µ—Ä—è–µ—Ç–µ 1 –æ—á–∫–æ!\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: <b>{user.user_score}</b>\n',
            reply_markup=ContinueKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)

    if data == 'change_difficulty':
        update.callback_query.edit_message_text(
            text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n\n{diff_description}',
            reply_markup=DifficultyChangingKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)

    if 'diff_' in data:
        if data == 'diff_1':
            user.difficulty = 1
            text = '–ü—Ä–æ—Å—Ç–æ–π'
        if data == 'diff_2':
            user.difficulty = 2
            text = '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π'
        if data == 'diff_3':
            user.difficulty = 3
            text = '–°–ª–æ–∂–Ω—ã–π'

        db.session.commit()

        update.callback_query.edit_message_text(
            text=f'–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ <b>{text}</b>',
            reply_markup=ContinueKeyboard().generate_keyboard_markup(),
            parse_mode=ParseMode.HTML)
